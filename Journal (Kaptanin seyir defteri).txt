18.10.2021

Gorunuse gore implement etmemiz gereken (officially) 3 yer var. Bunlar Game classinda solve() ve validSolution() functionlari.
Bir desudoku sinifinda addNeighbours() methodu.

Anladigim kadariyla her bir cell e her bir harf koydugumuz yere field diyoruz. Eyvallah. Bu fieldlarin neighbourlari var.
Ve aslinda biz arc consistincy leri bunlarin uzerinden sagliyoruz dogal olarak.
Saniyorum ilk olarak bu addNeighbours() fonksiyonunu implement etmek lazim.
----------
28.10.2021

Ilk fonksiyonu addNeighbours() methodunu implement ettim guzel calisiyor. Belki bir kod duzenlemesi yapmak gerekebilir. Simdilik
birakacagim.

Simdi yapmam gereken AC-3 algoritmasina hazir hale getirmek. Bunun icin priority queue gibi bir sey de kullanabilirim ya da dumduz bir
liste de kullanabilirim. Belki ARC gibi bir class olusturmam gerekiyor. Bir bakalim.
-----------------------------
29.10.2021

Simdi arc consistincy mantigi ile dusunmem ve sudokuyu bu yonde cozmem gerek. Simdi her bir field yani her bir cell,toplam
20 neighbour indan farkli olmak zorunda. Yani aslinda her bir cell icin ben 20 tane arc yapiyorum. yani mesela (0,3) teki cell icin ya
da field diyelim, 20 tane arc vardir. (0,3) -> (0,4) , (0,3) -> (0,5).. (0,3) -> (1,3) gibi.
Hakikaten bir Arc sinifi olusturabilirim.

Simdi dusundum de her bir field icin 20 arc var. Demek ki toplam arc sayisi = toplam field sayisi x 20 = 9x9 x20 = 81x20 = 1620. Wow.

Dusunursek birden fazla fonskiyon var :
1- A function that checks if the arc is in the list or not
2- Find the arcs containing Xi on the right hand side (demek ki bir arc bir tuple bir binary demek)
3- Update domain of Xi
4- Check the domain of left-hand side and check for all values there is a value in the domain of the right-hand side


---
Biraz update iyi olur. Arc classini olusturdum. Mantigim su sekilde. Field icinde arc listesi olusturdum. Eger basta sabit bir deger
varsa arc listesi bos. Eger yoksa neighbourlari right hand olarak ekliyorum. Boylece aslinda 31 sabit var ( evet 31) bu 1620 - 620 =
1000 arc demek. Test ettim dogru. Cunku her unknown field 20 arc yapacak. 50 tane unknown var. Hesap tutuyor. Yani unknown-> 6 gibi
bir arc var ancak asla 6-> unknown yok. Bunu halletmek iyi oldu.

----------------------------------------
01.11.2021

Evet AC-3 algoritmasini implement ettim ve Sudoku 1-2 ve 5te dogru calisiyor ancak 3 ve 4te calismiyor. Nedenini anlayamadim. Debug
yapmaya calistim ancak olmadi. Bilmiyorum, bugun biraz daha bakarim belki. Ancak eger bu cozulurse geriye tek bir method kaliyor o da
validSolution(). Saniyorum burada da basit bir checking yapmam gerek. Yani bu su demek her bir columnda 1den dokuza kadar sayilarin 
hepsi var. Her bir rowda da birden dokuza kadar sayilarin hepsi var. Ve her bir gride de birden dokuza kadar sayilarin hepsi var.
Column grid ve row sayisi dokuz oldugu icin eger birden dokuza kadar tum sayilar varsa hepsi bir kere var demektir. Bu da dogru
demektir. Sanirim :) Neyse onunla sonra ilgilenecegim sonra da rapor.
-----------------------------------------------------

19.11.2021

AC-3 algoritmasinda sorun yok ancak 3 ve 4u cozemiyor. CUNKU takilip kaliyor, bunu backtracking ile cozebiliriz. Burada da uc tane heuristic 
uygulariz derste ogrendigimiz. Bunun disinda valid solution isini cozmem gerekiyor. Zaten bence valid solutionu bu backtracking seyinde 
kullanmaliyim. Eger valid solution yoksa backtracking yapmali ve tekrardan AC-3 uygulamaliyim. Ote yandan complexity nin anasini belledigimi
itiraf etmeliyim. Neyse en iyisi bir ozet yapmak. Fazla vaktim kalmadi.23 unde bitirmek istiyorum. Yani bu 4 gun eder :). Epey az. Peki,
yapilacaklar sunlar :

1- Back tracking
2- Valid solution
3- getOtherNeighbours u kullanan bir fonksiyon(?)
---------
Yeni aldigim haberlere gore isler biraz degisik. Soyle ki backtracking falan yapmama gerek yok. Hatta heuristicleri onun icin kullanmiyorum.
Zaten 2 tane sudoku yani 3 ve 4 cozulemiyormus AC-3 le ( bunu zaten biliyorduk) ve cozulmesine gerek de yokmus. Buradaki yani bu assignmentin
amaclarindan biri de ac-3 un farkli heuristicler ile complexity sini hesaplamak. Bu arada valid solution icin tamamiyla domainlere bakmam
yeterli, yani cok kolay. 81 tane variable var. Eger bir tanesinin bile domaini birden farkli ise iste valid solution degildir. Bu cepte
Ikincisi ve onemlisi ise priority queue implement etmem gerek. Ve bu oyle ki heuristicler ile uyumlu olmali. Bunu iyi dusunmem gerekiyor.
Bugun bitirebilirsem cok iyi olur. Ucuncu olarak da heuristicleri uygulamak gerek. Cok zor degildir diye tahmin ediyorum yani neticede domain
sayilarina bakacagim mesela simdiden kafamda mrv icin pseudo code var :
int minimum = Integer.Infinity
mrv = first variable / null?
for each variable v
    if (v.getDomainSize < minimum)
        minimum = v.getDomainSize
        mrv = v
return mrv

Aynen bu kadar :) . Neyse bugunluk priority queue ve valid solution implement etmeliyim. Sonra da heuristicler. Ancak dedigim gibi priority 
queue icin dikkatli olmaliyim heuristicler ile eslesmeli.

-----------------
Ilk gorevi yani valid solution i implement ettim. Yaklasik 2 dakika surdu ve calisiyor :) 